package common

import (
	"github.com/DSiSc/craft/types"
	"github.com/stretchr/testify/assert"
	"math/big"
	"testing"
	"time"
)

func MockTransaction() *types.Transaction {
	to := &types.Address{
		0xb2, 0x6f, 0x2b, 0x34, 0x2a, 0xab, 0x24, 0xbc, 0xf6, 0x3e,
		0xa2, 0x18, 0xc6, 0xa9, 0x27, 0x4d, 0x30, 0xab, 0x9a, 0x15,
	}
	from := &types.Address{
		0x12, 0x6f, 0x2b, 0x34, 0x2a, 0xab, 0x24, 0xbc, 0xf6, 0x3e,
		0xa2, 0x18, 0xc6, 0xa9, 0x27, 0x4d, 0x30, 0xab, 0x9a, 0x15,
	}

	data := []byte{
		0xb2, 0x6f, 0x2b, 0x34, 0x2a, 0xab, 0x24, 0xbc, 0xf6, 0x3e,
	}

	tx := &types.Transaction{
		Data: types.TxData{
			AccountNonce: 0,
			Price:        new(big.Int).SetUint64(10),
			GasLimit:     100,
			Recipient:    to,
			From:         from,
			Amount:       new(big.Int).SetUint64(50),
			Payload:      data,
		},
	}
	return tx
}

var MockHash = types.Hash{
	0x1d, 0xcf, 0x7, 0xba, 0xfc, 0x42, 0xb0, 0x8d, 0xfd, 0x23, 0x9c, 0x45, 0xa4, 0xb9, 0x38, 0xd,
	0x8d, 0xfe, 0x5d, 0x6f, 0xa7, 0xdb, 0xd5, 0x50, 0xc9, 0x25, 0xb1, 0xb3, 0x4, 0xdc, 0xc5, 0x1c,
}

var MockBlockHash = types.Hash{
	0x92, 0x13, 0x10, 0x35, 0x5b, 0x2d, 0xbc, 0x51, 0xea, 0x5, 0x8b, 0x7d, 0x2a, 0xed, 0x2, 0xcc,
	0xfa, 0xdf, 0xa4, 0xc4, 0xd1, 0x53, 0x5f, 0xc3, 0xcc, 0x69, 0xd6, 0x8, 0xaf, 0x1e, 0x3c, 0x96,
}

var MockHeaderHash = types.Hash{
	0xaf, 0x79, 0x9b, 0x17, 0xa8, 0xc5, 0xdb, 0x57, 0x5b, 0xc0, 0x9f, 0xa0, 0x4b, 0x5c, 0x8, 0x9b,
	0x85, 0x18, 0xf2, 0xa8, 0xaf, 0xbf, 0x82, 0x52, 0xa5, 0x74, 0xbf, 0xef, 0xbe, 0x66, 0x88, 0x5d,
}

func TestTxHash(t *testing.T) {
	hash := TxHash(MockTransaction())
	assert.Equal(t, MockHash, hash)
}

func MockBlock() *types.Block {
	return &types.Block{
		Header: &types.Header{
			ChainID:       1,
			PrevBlockHash: MockHash,
			StateRoot:     MockHash,
			TxRoot:        MockHash,
			ReceiptsRoot:  MockHash,
			Height:        1,
			Timestamp:     uint64(time.Date(2018, time.August, 28, 0, 0, 0, 0, time.UTC).Unix()),
			MixDigest:     MockHash,
		},
		Transactions: make([]*types.Transaction, 0),
	}
}

func TestBlockHash(t *testing.T) {
	block := MockBlock()
	blockHash := BlockHash(block)
	assert.Equal(t, MockBlockHash, blockHash)
	headerHash := HeaderHash(block.Header)
	assert.Equal(t, MockHeaderHash, headerHash)
}

func TestNewRefAddress(t *testing.T) {
	mock := types.Address{
		0xb2, 0x6f, 0x2b, 0x34, 0x2a, 0xab, 0x24, 0xbc, 0xf6, 0x3e,
		0xa2, 0x18, 0xc6, 0xa9, 0x27, 0x4d, 0x30, 0xab, 0x9a, 0x15,
	}
	refAddr := NewRefAddress(mock)
	assert.NotNil(t, refAddr)
	addr := refAddr.Address()
	assert.Equal(t, mock, addr)
}

func TestHashToByte(t *testing.T) {
	bytes := HashToByte(MockBlockHash)
	var exceptByte = []byte{
		0x92, 0x13, 0x10, 0x35, 0x5b, 0x2d, 0xbc, 0x51, 0xea, 0x5, 0x8b, 0x7d, 0x2a, 0xed, 0x2, 0xcc,
		0xfa, 0xdf, 0xa4, 0xc4, 0xd1, 0x53, 0x5f, 0xc3, 0xcc, 0x69, 0xd6, 0x8, 0xaf, 0x1e, 0x3c, 0x96,
	}
	assert.Equal(t, exceptByte, bytes)
}
